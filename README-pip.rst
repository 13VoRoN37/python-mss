************************************************************************************
An ultra fast cross-platform multiple screenshots module in pure python using ctypes
************************************************************************************

Very basic, it will grab one screen shot by monitor or a screen shot of all monitors and save it to a PNG file, Python 2.6/3.5 compatible & PEP8 compliant.
It could be easily embedded into games and other softwares which require fast and plateforme optimized methods to grab screenshots.

**MSS** stands for **M**ultiple **S**creen**S**hots.

It's under zlib licence.


Installation
============

You can install it with pip::

    pip install --upgrade mss

Support
-------


============  ============  ============  ============
Python        GNU/Linux     MacOS X       Windows
============  ============  ============  ============
**3.5.1**     **True**      **True**      **True**
3.4.4         True          Unknown       True
3.3.6         True          Unknown       True
3.2.6         True          Unknown       True
3.1.5         True          Unknown       True
3.0.1         True          Unknown       True
**2.7.11**    **True**      **True**      **True**
2.6.9         True          True          True
============  ============  ============  ============

Feel free to try MSS on a system we had not tested, and let report us by creating an issue_.

.. _issue: https://github.com/BoboTiG/python-mss/issues


Testing
=======

You can try the MSS module directly from the console::

    python tests.py


Instance the good class
=======================

So MSS can be used as simply as::

    from mss import mss
    with mss() as screenshotter:
        # ...

Or import the good one (choose one)::

    # MacOS X
    from mss.darwin import MSS

    # GNU/Linux
    from mss.linux import MSS

    # Microsoft Windows
    from mss.windows import MSS

    with MSS() as screenshotter:
        # ...

Of course, you can use it the old way::

    from mss import mss  # or from mss.linux import MSS as mss
    screenshotter = mss()
    # ...


Errors
======

If an error occures, the `ScreenshotError` exception is raised.


Examples
========

One screenshot per monitor::

    for filename in screenshotter.save():
        print(filename)

Screenshot of the monitor 1::

    print(next(screenshotter.save(mon=1)))

Screenshot of the monitor 1, with callback::

    def on_exists(fname):
        ''' Callback example when we try to overwrite an existing
            screenshot.
        '''

        from os import rename
        from os.path import isfile

        if isfile(fname):
            newfile = fname + '.old'
            print('{0} -> {1}'.format(fname, newfile))
            rename(fname, newfile)
        return True

    print(next(screenshotter.save(mon=1, callback=on_exists)))

A screenshot to grab them all::

    print(next(screenshotter.save(mon=-1, output='fullscreen.png')))


----


**************
API: version 2
**************

enum_display_monitors(force)
============================

Get positions and dimensions of monitors.

Parameter::

    force (boolean, default: False)
        If set to True, if will rescan for monitors informations.

It stocks monitors informations into `monitors` and returns it.


get_pixels(monitor)
===================

Retrieve screen pixels for a given monitor.

Parameter::

    monitor (dict)
        A dict generated by enum_display_monitors().

It stocks pixels data into `image` (RGB) and returns it.


save(mon, output, callback)
===========================

Grab a screenshot and save it to a file.

Parameters::

    mon (integer, default: 0)
        -1: grab one screenshot of all monitors
         0: grab one screenshot by monitor
         N: grab the screenshot of the monitor N

    output (string, default: monitor-%d.png)
        The output filename.
        %d, if presents, will be replaced by the monitor number.

    callback (method)
        Callback called before saving the screenshot to a file.
        Take the 'output' argument as parameter.

This is a generator which returns created files.


to_png(data, width, height, output)
===================================

Dump data to the image file.

Parameters:

    data (bytes)
        Raw data (pixels) into RGB mode.

    width and height (integer)
        Dimensions of the output image.

    output (string)
        The output filename.
